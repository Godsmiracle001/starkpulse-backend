name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - run: npm ci
      - run: npm run lint
      - run: npm run format

  test:
    runs-on: ubuntu-latest
    needs: lint-and-format
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - run: npm ci
      - run: npm run test:ci
      - run: npm run test:e2e

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - run: npm ci
      - run: npm run build
      - name: Upload dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        if: secrets.DOCKERHUB_USERNAME && secrets.DOCKERHUB_TOKEN
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ secrets.DOCKERHUB_USERNAME && secrets.DOCKERHUB_TOKEN }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/starkpulse-backend:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Save Docker image as artifact (for rollback)
        run: |
          docker save ${{ secrets.DOCKERHUB_USERNAME }}/starkpulse-backend:latest | gzip > starkpulse-backend-latest.tar.gz
        if: secrets.DOCKERHUB_USERNAME && secrets.DOCKERHUB_TOKEN
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: starkpulse-backend-latest.tar.gz
        if: secrets.DOCKERHUB_USERNAME && secrets.DOCKERHUB_TOKEN

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .
        if: secrets.DOCKERHUB_USERNAME && secrets.DOCKERHUB_TOKEN
      # Add your deployment steps here (e.g., Docker run, SSH, cloud CLI)
      # - name: Deploy to server
      #   run: |
      #     docker load < starkpulse-backend-latest.tar.gz
      #     docker run -d -p 3000:3000 --env-file .env ${{ secrets.DOCKERHUB_USERNAME }}/starkpulse-backend:latest
      # - name: Sentry Release (optional)
      #   run: |
      #     # sentry-cli releases new ...
      #     # sentry-cli releases finalize ...
      #   env:
      #     SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      #     SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
      #     SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}

  # Optionally, add a job for monitoring hooks or health checks
  # monitor:
  #   runs-on: ubuntu-latest
  #   needs: deploy
  #   steps:
  #     - name: Health check
  #       run: |
  #         curl --fail http://your-deployment-url/health || exit 1
  #     # If health check fails, manual rollback instructions or trigger
  #     # - name: Rollback
  #     #   run: ...
